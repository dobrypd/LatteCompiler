-- programs ------------------------------------------------

entrypoints Prog ;

Program.    Prog ::= [TopDef] ;

FnDef.      TopDef ::= Type Ident "(" [Arg] ")" Blk ;

ClsDefNoInher.      TopDef ::= "class" Ident "{" [ ClsDef ] "}" ;

ClsDefInher.        TopDef ::= "class" Ident "extends" Ident "{" [ ClsDef ] "}" ; 

separator nonempty TopDef "" ;

Argument.   Arg ::= Type Ident;

separator   Arg "," ;

MethodDef.  ClsDef ::= Type Ident "(" [Arg] ")" Blk ;

FieldDef.   ClsDef ::= Type Ident ";" ;

separator ClsDef "" ;


-- statements ----------------------------------------------

StmBlock.   Blk ::= "{" [Stmt] "}" ;

separator   Stmt "" ;

StmEmpty.   Stmt ::= ";" ;

StmBStmt.   Stmt ::= Blk ;

StmDecl.    Stmt ::= Type [Item] ";" ;

StmNoInit.      Item ::= Ident ; 

StmInit.        Item ::= Ident "=" Expr ;

StmInitArray.   Item ::= Ident "=" "new" Type "[" Expr "]" ;

StmInitObj.     Item ::= Ident "=" "new" Type ;

separator nonempty Item "," ;   

SingleIdent.    StructuredIdent ::= Ident ;

TableVal.       StructuredIdent ::= Ident "[" [ArrayIndex] "]" ;

SelfIdent.      StructuredIdent ::= "self" ;

ExprIndex.  ArrayIndex ::= Expr ;

separator nonempty ArrayIndex "][" ;

separator nonempty StructuredIdent "." ;

StmAss.     Stmt ::= [StructuredIdent] "=" Expr  ";" ;

StmAssArr.  Stmt ::= [StructuredIdent] "=" "new" Type "[" Expr "]" ;

StmAssObj.  Stmt ::= [StructuredIdent] "=" "new" Type ;

StmIncr.    Stmt ::= [StructuredIdent] "++"  ";" ;

StmDecr.    Stmt ::= [StructuredIdent] "--"  ";" ;

StmRet.     Stmt ::= "return" Expr ";" ;

StmVRet.    Stmt ::= "return" ";" ;

StmCond.    Stmt ::= "if" "(" Expr ")" Stmt  ;

StmCondElse.  Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt  ;

StmWhile.   Stmt ::= "while" "(" Expr ")" Stmt ;

StmForeach. Stmt ::= "for" "(" Type Ident ":" [StructuredIdent] ")" Stmt ;

StmSExp.    Stmt ::= Expr  ";" ;

-- Types ---------------------------------------------------

Class.     Type ::= Ident ;

Int.       Type ::= "int" ;

Str.       Type ::= "string" ;

Bool.      Type ::= "boolean" ;

Void.      Type ::= "void" ;

--internal   Fun. Type ::= Type "(" [Type] ")" ;

TType.     Type ::= Type "[" "]" ;

--separator  Type "," ;

-- Expressions ---------------------------------------------

EVar.      Expr6 ::= [StructuredIdent] ;

ELitInt.   Expr6 ::= Integer ;

ELitTrue.  Expr6 ::= "true" ;

ELitFalse. Expr6 ::= "false" ;

ELitNull.  Expr6 ::= "null" ;

EApp.      Expr6 ::= [StructuredIdent] "(" [Expr] ")" ;

EString.   Expr6 ::= String ;

Neg.       Expr5 ::= "-" Expr6 ;

Not.       Expr5 ::= "!" Expr6 ;

EDynamicCast. Expr5 ::= "(" Ident ")" Expr6 ;

EMul.      Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;

ERel.      Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;

EOr.       Expr ::= Expr1 "||" Expr ;

coercions  Expr 6 ;

separator  Expr "," ;

-- operators -----------------------------------------------

Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;

Div.       MulOp ::= "/" ;

Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

EQU.       RelOp ::= "==" ;

NE.        RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment    "#" ;

comment    "//" ;

comment    "/*" "*/" ;

